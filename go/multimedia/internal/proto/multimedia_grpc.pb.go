// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/multimedia.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MultimediaService_SearchContent_FullMethodName  = "/multimedia.MultimediaService/SearchContent"
	MultimediaService_StreamContent_FullMethodName  = "/multimedia.MultimediaService/StreamContent"
	MultimediaService_ManagePlaylist_FullMethodName = "/multimedia.MultimediaService/ManagePlaylist"
)

// MultimediaServiceClient is the client API for MultimediaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultimediaServiceClient interface {
	// Content search
	SearchContent(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Content streaming
	StreamContent(ctx context.Context, in *ContentResponse, opts ...grpc.CallOption) (MultimediaService_StreamContentClient, error)
	// Playlist management
	ManagePlaylist(ctx context.Context, opts ...grpc.CallOption) (MultimediaService_ManagePlaylistClient, error)
}

type multimediaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultimediaServiceClient(cc grpc.ClientConnInterface) MultimediaServiceClient {
	return &multimediaServiceClient{cc}
}

func (c *multimediaServiceClient) SearchContent(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, MultimediaService_SearchContent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multimediaServiceClient) StreamContent(ctx context.Context, in *ContentResponse, opts ...grpc.CallOption) (MultimediaService_StreamContentClient, error) {
	stream, err := c.cc.NewStream(ctx, &MultimediaService_ServiceDesc.Streams[0], MultimediaService_StreamContent_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &multimediaServiceStreamContentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MultimediaService_StreamContentClient interface {
	Recv() (*ContentResponse, error)
	grpc.ClientStream
}

type multimediaServiceStreamContentClient struct {
	grpc.ClientStream
}

func (x *multimediaServiceStreamContentClient) Recv() (*ContentResponse, error) {
	m := new(ContentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *multimediaServiceClient) ManagePlaylist(ctx context.Context, opts ...grpc.CallOption) (MultimediaService_ManagePlaylistClient, error) {
	stream, err := c.cc.NewStream(ctx, &MultimediaService_ServiceDesc.Streams[1], MultimediaService_ManagePlaylist_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &multimediaServiceManagePlaylistClient{stream}
	return x, nil
}

type MultimediaService_ManagePlaylistClient interface {
	Send(*PlaylistRequest) error
	Recv() (*PlaylistResponse, error)
	grpc.ClientStream
}

type multimediaServiceManagePlaylistClient struct {
	grpc.ClientStream
}

func (x *multimediaServiceManagePlaylistClient) Send(m *PlaylistRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *multimediaServiceManagePlaylistClient) Recv() (*PlaylistResponse, error) {
	m := new(PlaylistResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MultimediaServiceServer is the server API for MultimediaService service.
// All implementations must embed UnimplementedMultimediaServiceServer
// for forward compatibility
type MultimediaServiceServer interface {
	// Content search
	SearchContent(context.Context, *SearchRequest) (*SearchResponse, error)
	// Content streaming
	StreamContent(*ContentResponse, MultimediaService_StreamContentServer) error
	// Playlist management
	ManagePlaylist(MultimediaService_ManagePlaylistServer) error
	mustEmbedUnimplementedMultimediaServiceServer()
}

// UnimplementedMultimediaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMultimediaServiceServer struct {
}

func (UnimplementedMultimediaServiceServer) SearchContent(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchContent not implemented")
}
func (UnimplementedMultimediaServiceServer) StreamContent(*ContentResponse, MultimediaService_StreamContentServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamContent not implemented")
}
func (UnimplementedMultimediaServiceServer) ManagePlaylist(MultimediaService_ManagePlaylistServer) error {
	return status.Errorf(codes.Unimplemented, "method ManagePlaylist not implemented")
}
func (UnimplementedMultimediaServiceServer) mustEmbedUnimplementedMultimediaServiceServer() {}

// UnsafeMultimediaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultimediaServiceServer will
// result in compilation errors.
type UnsafeMultimediaServiceServer interface {
	mustEmbedUnimplementedMultimediaServiceServer()
}

func RegisterMultimediaServiceServer(s grpc.ServiceRegistrar, srv MultimediaServiceServer) {
	s.RegisterService(&MultimediaService_ServiceDesc, srv)
}

func _MultimediaService_SearchContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultimediaServiceServer).SearchContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MultimediaService_SearchContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultimediaServiceServer).SearchContent(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultimediaService_StreamContent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContentResponse)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MultimediaServiceServer).StreamContent(m, &multimediaServiceStreamContentServer{stream})
}

type MultimediaService_StreamContentServer interface {
	Send(*ContentResponse) error
	grpc.ServerStream
}

type multimediaServiceStreamContentServer struct {
	grpc.ServerStream
}

func (x *multimediaServiceStreamContentServer) Send(m *ContentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MultimediaService_ManagePlaylist_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MultimediaServiceServer).ManagePlaylist(&multimediaServiceManagePlaylistServer{stream})
}

type MultimediaService_ManagePlaylistServer interface {
	Send(*PlaylistResponse) error
	Recv() (*PlaylistRequest, error)
	grpc.ServerStream
}

type multimediaServiceManagePlaylistServer struct {
	grpc.ServerStream
}

func (x *multimediaServiceManagePlaylistServer) Send(m *PlaylistResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *multimediaServiceManagePlaylistServer) Recv() (*PlaylistRequest, error) {
	m := new(PlaylistRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MultimediaService_ServiceDesc is the grpc.ServiceDesc for MultimediaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultimediaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multimedia.MultimediaService",
	HandlerType: (*MultimediaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchContent",
			Handler:    _MultimediaService_SearchContent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamContent",
			Handler:       _MultimediaService_StreamContent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ManagePlaylist",
			Handler:       _MultimediaService_ManagePlaylist_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/multimedia.proto",
}
