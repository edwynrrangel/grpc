// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/playlist.proto

package playlist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlayListService_Manage_FullMethodName = "/PlayListService/Manage"
)

// PlayListServiceClient is the client API for PlayListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayListServiceClient interface {
	// Playlist management
	Manage(ctx context.Context, opts ...grpc.CallOption) (PlayListService_ManageClient, error)
}

type playListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayListServiceClient(cc grpc.ClientConnInterface) PlayListServiceClient {
	return &playListServiceClient{cc}
}

func (c *playListServiceClient) Manage(ctx context.Context, opts ...grpc.CallOption) (PlayListService_ManageClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlayListService_ServiceDesc.Streams[0], PlayListService_Manage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &playListServiceManageClient{stream}
	return x, nil
}

type PlayListService_ManageClient interface {
	Send(*PlaylistRequest) error
	Recv() (*PlaylistResponse, error)
	grpc.ClientStream
}

type playListServiceManageClient struct {
	grpc.ClientStream
}

func (x *playListServiceManageClient) Send(m *PlaylistRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *playListServiceManageClient) Recv() (*PlaylistResponse, error) {
	m := new(PlaylistResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlayListServiceServer is the server API for PlayListService service.
// All implementations must embed UnimplementedPlayListServiceServer
// for forward compatibility
type PlayListServiceServer interface {
	// Playlist management
	Manage(PlayListService_ManageServer) error
	mustEmbedUnimplementedPlayListServiceServer()
}

// UnimplementedPlayListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlayListServiceServer struct {
}

func (UnimplementedPlayListServiceServer) Manage(PlayListService_ManageServer) error {
	return status.Errorf(codes.Unimplemented, "method Manage not implemented")
}
func (UnimplementedPlayListServiceServer) mustEmbedUnimplementedPlayListServiceServer() {}

// UnsafePlayListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayListServiceServer will
// result in compilation errors.
type UnsafePlayListServiceServer interface {
	mustEmbedUnimplementedPlayListServiceServer()
}

func RegisterPlayListServiceServer(s grpc.ServiceRegistrar, srv PlayListServiceServer) {
	s.RegisterService(&PlayListService_ServiceDesc, srv)
}

func _PlayListService_Manage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlayListServiceServer).Manage(&playListServiceManageServer{stream})
}

type PlayListService_ManageServer interface {
	Send(*PlaylistResponse) error
	Recv() (*PlaylistRequest, error)
	grpc.ServerStream
}

type playListServiceManageServer struct {
	grpc.ServerStream
}

func (x *playListServiceManageServer) Send(m *PlaylistResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *playListServiceManageServer) Recv() (*PlaylistRequest, error) {
	m := new(PlaylistRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlayListService_ServiceDesc is the grpc.ServiceDesc for PlayListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PlayListService",
	HandlerType: (*PlayListServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Manage",
			Handler:       _PlayListService_Manage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/playlist.proto",
}
